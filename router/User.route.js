const express = require("express");
const bcrypt = require("bcryptjs");
const jwt = require("jsonwebtoken");
const User = require("../models/User.model");
require("dotenv").config();
const Address = require("../models/Address.model");
const PDFDocument = require("pdfkit");
const moment = require("moment");

const userRouter = express.Router();

// Get all users (for admin or privileged access)
userRouter.get("/", async (req, res) => {
  try {
    const users = await User.find();
    res.json(users);
  } catch (error) {
    console.error("Error fetching users:", error);
    res.status(500).json({ error: "Failed to fetch users" });
  }
});

userRouter.get("/download/pdfs", async (req, res) => {
  try {
    const users = await User.find();

    // Set headers
    res.setHeader("Content-Type", "application/pdf");
    res.setHeader("Content-Disposition", "attachment; filename=users.pdf");

    const doc = new PDFDocument();
    doc.pipe(res); // pipe to response

    doc.fontSize(18).text("User List", { align: "center" });
    doc.moveDown();

    users.forEach((user, index) => {
      doc
        .fontSize(12)
        .text(`${index + 1}. Name: ${user.name || "N/A"}`)
        .text(`   Email: ${user.email || "N/A"}`)
        .text(`   Role: ${user.role || "N/A"}`)
        .text(`   Created: ${user.createdAt?.toDateString() || "N/A"}`)
        .moveDown();
    });

    doc.end();
  } catch (error) {
    console.error("Error generating PDF:", error);
    res.status(500).json({ error: "Failed to generate user PDF" });
  }
});
userRouter.get("/download/pdfd", async (req, res) => {
  try {
    const users = await User.find();

    // Replace this with authenticated user if using auth middleware
    const generatedBy = req.user?.name || "System Admin";

    // Prepare response headers
    res.setHeader("Content-Type", "application/pdf");
    res.setHeader(
      "Content-Disposition",
      "attachment; filename=users_report.pdf"
    );

    const doc = new PDFDocument({ margin: 30, size: "A4" });
    doc.pipe(res);

    // Title
    doc.fontSize(18).text("User Report", { align: "center" });
    doc.moveDown(0.5);

    // Metadata
    doc
      .fontSize(10)
      .text(`Report generated on: ${moment().format("YYYY-MM-DD HH:mm:ss")}`)
      .text(`Generated by: ${generatedBy}`);
    doc.moveDown(1);

    // Table headers
    doc
      .fontSize(12)
      .text("No", 30, doc.y, { continued: true })
      .text("Name", 60, doc.y, { continued: true })
      .text("Email", 180, doc.y, { continued: true })
      .text("Role", 320, doc.y, { continued: true })
      .text("Created At", 400, doc.y);
    doc.moveDown(0.5);

    // Line under headers
    doc.moveTo(30, doc.y).lineTo(570, doc.y).stroke();
    doc.moveDown(0.2);

    // Users data
    users.forEach((user, index) => {
      doc
        .fontSize(10)
        .text(index + 1, 30, doc.y, { continued: true })
        .text(user.name || "N/A", 60, doc.y, { continued: true })
        .text(user.email || "N/A", 180, doc.y, { continued: true })
        .text(user.role || "N/A", 320, doc.y, { continued: true })
        .text(moment(user.createdAt).format("YYYY-MM-DD") || "N/A", 400, doc.y);
      doc.moveDown(0.2);
    });

    doc.end();
  } catch (error) {
    console.error("Error generating PDF:", error);
    res.status(500).json({ error: "Failed to generate user PDF" });
  }
});
userRouter.post("/download/pdf", async (req, res) => {
  try {
    const users = await User.find();

    const generatedBy = req.user?.name || "System Admin";

    res.setHeader("Content-Type", "application/pdf");
    res.setHeader(
      "Content-Disposition",
      "attachment; filename=users_report.pdf"
    );

    const doc = new PDFDocument({ margin: 40, size: "A4" });
    doc.pipe(res);

    // Title
    doc.fontSize(18).text("User Report", { align: "center" });
    doc.moveDown(0.5);

    // Metadata
    doc
      .fontSize(10)
      .text(`Report generated on: ${moment().format("YYYY-MM-DD HH:mm:ss")}`)
      .text(`Generated by: ${generatedBy}`);
    doc.moveDown(1);

    // Table column headers with fixed widths
    const tableTop = doc.y;
    const columnWidths = {
      no: 40,
      name: 120,
      email: 150,
      role: 80,
      createdAt: 100,
    };

    doc.fontSize(11).font("Helvetica-Bold");
    doc
      .text("No", 40, tableTop, { width: columnWidths.no })
      .text("Name", 80, tableTop, { width: columnWidths.name })
      .text("Email", 200, tableTop, { width: columnWidths.email })
      .text("Role", 350, tableTop, { width: columnWidths.role })
      .text("Created At", 430, tableTop, { width: columnWidths.createdAt });

    doc
      .moveTo(40, doc.y + 15)
      .lineTo(550, doc.y + 15)
      .stroke();
    doc.moveDown(2);

    // Reset font
    doc.font("Helvetica").fontSize(10);

    users.forEach((user, index) => {
      const y = doc.y;

      doc
        .text(index + 1, 40, y, { width: columnWidths.no })
        .text(user.name || "N/A", 80, y, {
          width: columnWidths.name,
          ellipsis: true,
        })
        .text(user.email || "N/A", 200, y, {
          width: columnWidths.email,
          ellipsis: true,
        })
        .text(user.role || "N/A", 350, y, { width: columnWidths.role })
        .text(moment(user.createdAt).format("YYYY-MM-DD"), 430, y, {
          width: columnWidths.createdAt,
        });
      doc.moveDown(0.5);
    });

    doc.end();
  } catch (error) {
    console.error("Error generating PDF:", error);
    res.status(500).json({ error: "Failed to generate user PDF" });
  }
});
// Update User
userRouter.put("/", async (req, res) => {
  try {
    const { name, phoneNumber, street, town, county, newPassword } = req.body;

    // Find and update the user
    const user = req.user;

    if (name) user.name = name;
    if (phoneNumber) user.phoneNumber = phoneNumber;
    if (newPassword) user.password = newPassword; // No need to hash, handled in pre-save

    await user.save(); // Save updated user

    // Find and update the address, or create if not exists
    await Address.findOneAndUpdate(
      { userId: req.user._id }, // Find by user ID
      { street, town, county }, // Update fields
      { new: true, upsert: true } // Create if not found
    );

    res.json({ message: "User updated successfully", user });
  } catch (error) {
    console.error("Update user error:", error);
    res.status(500).json({ error: "Failed to update user" });
  }
});

// Delete User
userRouter.delete("/:id", async (req, res) => {
  try {
    const user = await User.findByIdAndDelete(req.params.id);
    if (!user) return res.status(404).json({ message: "User not found" });
    res.json({ message: "User deleted successfully" });
  } catch (error) {
    console.error("Delete user error:", error);
    res.status(500).json({ error: "Failed to delete user" });
  }
});
// Get User and Address Details
userRouter.get("/user", async (req, res) => {
  try {
    const user = req.user;
    user.password = undefined; // The logged-in user

    const address = await Address.findOne({ userId: user._id });
    res.json({
      user,
      address: address ? address : "No address found for this user.",
      addressAvailable: !!address,
    });
  } catch (error) {
    console.error("Error fetching user and address details:", error);
    res.status(500).json({ error: "Failed to fetch user and address details" });
  }
});

module.exports = userRouter;
